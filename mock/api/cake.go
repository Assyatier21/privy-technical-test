// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/cake_v2.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// DeleteCake mocks base method.
func (m *MockHandler) DeleteCake(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCake", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCake indicates an expected call of DeleteCake.
func (mr *MockHandlerMockRecorder) DeleteCake(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCake", reflect.TypeOf((*MockHandler)(nil).DeleteCake), c)
}

// GetDetailsOfCake mocks base method.
func (m *MockHandler) GetDetailsOfCake(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailsOfCake", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDetailsOfCake indicates an expected call of GetDetailsOfCake.
func (mr *MockHandlerMockRecorder) GetDetailsOfCake(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailsOfCake", reflect.TypeOf((*MockHandler)(nil).GetDetailsOfCake), c)
}

// GetListOfCakes mocks base method.
func (m *MockHandler) GetListOfCakes(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOfCakes", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetListOfCakes indicates an expected call of GetListOfCakes.
func (mr *MockHandlerMockRecorder) GetListOfCakes(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfCakes", reflect.TypeOf((*MockHandler)(nil).GetListOfCakes), c)
}

// InsertCake mocks base method.
func (m *MockHandler) InsertCake(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCake", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCake indicates an expected call of InsertCake.
func (mr *MockHandlerMockRecorder) InsertCake(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCake", reflect.TypeOf((*MockHandler)(nil).InsertCake), c)
}

// UpdateCake mocks base method.
func (m *MockHandler) UpdateCake(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCake", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCake indicates an expected call of UpdateCake.
func (mr *MockHandlerMockRecorder) UpdateCake(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCake", reflect.TypeOf((*MockHandler)(nil).UpdateCake), c)
}
