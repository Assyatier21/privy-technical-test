// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/cake_v2.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	models "privy/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteCake mocks base method.
func (m *MockRepository) DeleteCake(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCake", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCake indicates an expected call of DeleteCake.
func (mr *MockRepositoryMockRecorder) DeleteCake(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCake", reflect.TypeOf((*MockRepository)(nil).DeleteCake), ctx, id)
}

// GetDetailsOfCake mocks base method.
func (m *MockRepository) GetDetailsOfCake(ctx context.Context, id int) (models.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailsOfCake", ctx, id)
	ret0, _ := ret[0].(models.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailsOfCake indicates an expected call of GetDetailsOfCake.
func (mr *MockRepositoryMockRecorder) GetDetailsOfCake(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailsOfCake", reflect.TypeOf((*MockRepository)(nil).GetDetailsOfCake), ctx, id)
}

// GetListOfCakes mocks base method.
func (m *MockRepository) GetListOfCakes(ctx context.Context, limit, offset int) ([]models.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOfCakes", ctx, limit, offset)
	ret0, _ := ret[0].([]models.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOfCakes indicates an expected call of GetListOfCakes.
func (mr *MockRepositoryMockRecorder) GetListOfCakes(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfCakes", reflect.TypeOf((*MockRepository)(nil).GetListOfCakes), ctx, limit, offset)
}

// InsertCake mocks base method.
func (m *MockRepository) InsertCake(ctx context.Context, cake models.Cake) (models.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCake", ctx, cake)
	ret0, _ := ret[0].(models.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCake indicates an expected call of InsertCake.
func (mr *MockRepositoryMockRecorder) InsertCake(ctx, cake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCake", reflect.TypeOf((*MockRepository)(nil).InsertCake), ctx, cake)
}

// UpdateCake mocks base method.
func (m *MockRepository) UpdateCake(ctx context.Context, cake models.Cake) (models.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCake", ctx, cake)
	ret0, _ := ret[0].(models.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCake indicates an expected call of UpdateCake.
func (mr *MockRepositoryMockRecorder) UpdateCake(ctx, cake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCake", reflect.TypeOf((*MockRepository)(nil).UpdateCake), ctx, cake)
}
